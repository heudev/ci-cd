name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test
      - name: Run linting
        run: npm run lint

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/deploy_key

      - name: Add known hosts
        run: |
          echo "${{ secrets.VM_HOST }} $(ssh-keyscan -t rsa ${{ secrets.VM_HOST }} 2>/dev/null)" >> ~/.ssh/known_hosts

      - name: Deploy to VM
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
        run: |
          # Test SSH connection
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=accept-new $VM_USERNAME@$VM_HOST 'echo "SSH connection successful"'

          # Create app directory if it doesn't exist
          ssh -i ~/.ssh/deploy_key $VM_USERNAME@$VM_HOST 'mkdir -p ~/app'

          # Copy files
          scp -i ~/.ssh/deploy_key -r ./* $VM_USERNAME@$VM_HOST:/home/$VM_USERNAME/app/

          # Deploy application
          ssh -i ~/.ssh/deploy_key $VM_USERNAME@$VM_HOST '
            cd ~/app && \
            sudo docker-compose down || true && \
            sudo docker-compose up --build -d
          '
